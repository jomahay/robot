{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","console","log","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sNAiBeA,EAfJ,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAOC,EAAa,EAAbA,MAAOC,EAAM,EAANA,GAExB,OAEI,yBAAKC,UAAU,oDACV,6CACD,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,4BAAKF,GACL,2BAAIC,MCaLK,EAnBC,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAGd,OACI,6BAEWA,EAAOC,KAAI,SAACC,EAAKC,GAEhB,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAIK,EAAOG,GAAGR,GAAIF,KAAMO,EAAOG,GAAGV,KAAMC,MAAOM,EAAOG,GAAGT,aCEpFW,EAZE,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAG3B,OACI,yBAAKX,UAAU,OACvB,2BAAOY,SAAUD,EAAcX,UAAU,mCAAmCa,KAAK,SAASC,YAAY,oBCWvFC,EAhBA,SAACC,GAKZ,OAEI,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAkBC,OAAO,UAC5DJ,EAAMK,WCsEJC,E,YAvEX,aAAc,IAAD,8BACT,+CAyBJC,eAAgB,SAACC,GAEb,EAAKC,SAAS,CAACf,YAAYc,EAAME,OAAOC,QAExCC,QAAQC,IAAIL,EAAME,OAAOC,QA5BzB,EAAKG,MAAM,CAEP1B,OAAO,GACPM,YAAY,IAGhBkB,QAAQC,IAAI,eARH,E,iFAYO,IAAD,OAEfE,MAAM,8CAA8CC,MAAK,SAAAC,GAEjD,OAAOA,EAASC,UACrBF,MAAK,SAAAG,GAEJ,EAAKV,SAAS,CAACrB,OAAO+B,OAG1BP,QAAQC,IAAI,uB,+BAcP,IAAD,EAEyBO,KAAKN,MAA1B1B,EAFJ,EAEIA,OAAOM,EAFX,EAEWA,YAET2B,EAAejC,EAAOkC,QAAO,SAAAC,GAC/B,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAS/B,EAAY8B,kBAIzD,OAFAZ,QAAQC,IAAI,UAERzB,EAAOsC,OAMH,yBAAK1C,UAAU,MACX,kBAAC,EAAD,CAAWW,aAAcyB,KAAKb,iBAElC,kBAAC,EAAD,KAEA,kBAAC,EAAD,CAAUnB,OAAQiC,MATX,2C,GAjDLM,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.a91c9f9c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card=({ name , email ,id})=>{\r\n    //const { name , email ,id}=props;\r\n    return(\r\n       \r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n             <h1>Robot friends</h1>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport Card from './Card.js';\r\n\r\n\r\nconst CardList =({robots}) =>{\r\n\r\n   \r\n    return (\r\n        <div>\r\n            {\r\n                   robots.map((user,i) =>{\r\n\r\n                    return (<Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>);\r\n        })\r\n\r\n            }\r\n       \r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox =({searchfield,searchChange})=>{\r\n\r\n\r\n    return (\r\n        <div className='pa2'>\r\n<input onChange={searchChange} className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots'/>\r\n\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props)=>{\r\n\r\n   // console.log(props);\r\n\r\n\r\n    return (\r\n        \r\n        <div style={{overflowY:'scroll', border:'1px solid black',height:'500px'}}>\r\n            {props.children}\r\n\r\n        </div>\r\n        );\r\n\r\n\r\n};\r\n\r\nexport default Scroll ;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList.js';\r\nimport SearchBox from '../components/SearchBox.js';\r\nimport Scroll from '../components/Scroll.js';\r\nimport {robots} from '../robots';\r\n\r\n\r\n\r\nclass App extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n\r\n            robots:[],\r\n            searchfield:''\r\n        }\r\n\r\n        console.log('constructor');\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=>{\r\n\r\n                return response.json();\r\n        }).then(users=>{\r\n\r\n            this.setState({robots:users }) \r\n        })\r\n        \r\n        console.log('componentDidMount');\r\n\r\n    }\r\n\r\n    onSearchChange =(event) => {\r\n\r\n        this.setState({searchfield:event.target.value })\r\n\r\n        console.log(event.target.value);\r\n\r\n        \r\n\r\n       \r\n    }\r\n    render(){\r\n\r\n        const { robots,searchfield }=this.state;\r\n\r\n        const filteredRobots=robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        console.log('render');\r\n\r\n        if(!robots.length){\r\n\r\n                return <h1>loading</h1>\r\n        }else{\r\n\r\n            return (\r\n                <div className='tc'>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n\r\n                <Scroll>\r\n\r\n                <CardList robots={filteredRobots} />\r\n\r\n                </Scroll>\r\n                \r\n                </div>\r\n                \r\n            );\r\n        }\r\n        \r\n\r\n    }\r\n    \r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {robots} from './robots';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}